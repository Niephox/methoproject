package com.example.niephox.methophotos.Controllers;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;

import com.example.niephox.methophotos.Entities.Album;
import com.example.niephox.methophotos.Entities.Image;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

/*
 * Created by greycr0w on 4/28/2018.
 */

public class AlbumRepository {
	private ArrayList<Image> selectedImages;
	private Album album = new Album();
	private Context context; //context is used for selectionImageGallery
	private FirebaseService service = new FirebaseService(context);
	private final static int REQUEST_PICTURES = 1;

	public AlbumRepository() {
	}

	/**you can create an AlbumCreateController by giving the EditText album name, that the user
	enters and the constructor will throw a pop up screen to the user for selecting pictures saved
	in device storage.

	you can create an new album with just the album entity so you dont need a constructor for shit like desc and album names
	you only call create Album with the album you created if its an autogenerated album

	this is a constuctor that is used when the user wants to manually create an album by giving the album name and the descri of the x album
	 */

	//SIMPLY FOR THE USAGE OF THE PLUS BUTTON, WE USE THIS ALBUM REPO FOR CREATING A
	public AlbumRepository(Album album, Context context) {
		this.album = album; //we only set the album name and the album description. When the user has selected his desired pictures then the creation date of the x album is set with the images selected.
		this.context = context;
		openSelectionImageGallery();
	}


	//get created album
	public Album getAlbum() {
		return this.album;
	}


	public void createAlbumFromSelection(Album albumToCreate, Context context) {
		this.context = context;
		this.album = albumToCreate;
		openSelectionImageGallery();
	}

	private void openSelectionImageGallery() {
		Intent intent = new Intent(Intent.ACTION_PICK);
		Activity genActivity;
		intent.setType("image/*"); //allows any image file type. Change * to specific extension to limit it
		intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true); //EXTRA_ALLOW_MULTIPLE is an intent property that allows multiple selection of image/* images

		genActivity = (Activity) context;
		genActivity.startActivityForResult(Intent.createChooser(intent, "Select Picture"), REQUEST_PICTURES);

	}

	//This is an Album that is created locally, if you want the created album to be uploaded to the cloud you can call createAlbum
	public void saveSelectedImages(List<String> imageURIs) {
		selectedImages = new ArrayList<>();
		for (String uri : imageURIs)
			selectedImages.add(new Image(uri));
		album.setImages(selectedImages);
		album.setDate(Calendar.getInstance().getTime());
		createAlbum(album); //uploading the album and its images in firebase
	}

	//Local album is an Album that contains all the device images.
	public Album generateLocalAlbum(Context context) {
		StorageAdapter storageAdapter = new StorageAdapter();
		selectedImages = new ArrayList<>();
		selectedImages = storageAdapter.getAllStorageImages((Activity) context);
		album = new Album("Local Album", Calendar.getInstance().getTime(), "These pictures are taken from the phone storage", selectedImages);
		return album;
	}

	//remove image with the help of firebase service and add image to the other album with firebase service too
	public void transferImage(Image imgToTransfer, Album fromAlbum, Album toAlbum) {
		service.deleteImageFromAlbum(imgToTransfer, fromAlbum.getName()); //delete from one album,
		service.addImageToAlbum(imgToTransfer, toAlbum.getName()); //add to the other album
	}

	public void createAlbum(Album albumToCreate) {
		service.queryAlbumCreate(albumToCreate);
	}

	public void deleteAlbum(Album albumToDelete) {
		service.queryAlbumDelete(albumToDelete.getName());
	}

}


